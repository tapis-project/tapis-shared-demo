package edu.utexas.tacc.tapis.shared.ssh.apache;

import java.security.KeyPair;
import java.util.Collection;
import org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader;
import org.apache.sshd.common.util.security.SecurityUtils;
import edu.utexas.tacc.tapis.shared.exceptions.TapisSecurityException;
import edu.utexas.tacc.tapis.shared.i18n.MsgUtils;

/**
 * The purpose of this class is to take raw private key data from a string and
 * convert it to key objects used by the SSH subsystem.
 * 
 * Example key pairs may be find in tapis-shared-java/tapis-shared-lib/src/test/resources/edu/utexas/tacc/tapis/shared/ssh/apache
 *  -------------------                                         ----------------    ----------
 *  Linux Command / TMS                                         Private key file    Header
 *  -------------------                                         ----------------    ----------
 * ssh-keygen -t rsa -m pem         (Legacy)                    sshkeygen_rsa_pem   -----BEGIN RSA PRIVATE KEY-----
 * ssh-keygen -t rsa                                            sshkeygen_rsa       -----BEGIN OPENSSH PRIVATE KEY-----
 * ssh-keygen -t ed25519                                        sshkeygen_ed25519   -----BEGIN OPENSSH PRIVATE KEY-----
 * ssh-keygen -t ecdsa                                          sshkeygen_ecdsa     -----BEGIN OPENSSH PRIVATE KEY-----
 * TMS rsa                                                      tms_rsa             -----BEGIN OPENSSH PRIVATE KEY-----
 * TMS ed25519                                                  tms_ed25519         -----BEGIN OPENSSH PRIVATE KEY-----
 * TMS ecdsa                                                    tms_ecdsa           -----BEGIN OPENSSH PRIVATE KEY-----
 * openssl genrsa -out ./file 2048                              openssl_rsa         -----BEGIN PRIVATE KEY-----
 * openssl ecparam -name prime256v1 -genkey -noout -out ./file  openssl_ec          -----BEGIN EC PRIVATE KEY-----
 *
 * @author rcardone
 *
 */
public class SSHKeyLoader 
{
    /* ********************************************************************** */
    /*                               Constants                                */
    /* ********************************************************************** */
    // PEM file markers.  The first 4 are generated by openssl, the last 2 by
    // ssh-keygen.  This class only supports the openssl formats.
    public static final String ALG_RSA = "RSA";
    public static final String ALG_EDDSA = "EdDSA";
    public static final String ALG_EC = "EC";
    public static final String FORMAT_X509 = "X.509";
    public static final String FORMAT_PKCS8 = "PKCS#8";

    /* ********************************************************************** */
    /*                                Fields                                  */
    /* ********************************************************************** */
    // Inputs.
    private final String _privateKey;
    private final String _publicKey;
    private final String _host;
    private final String _username;


    /* ********************************************************************** */
    /*                            Constructors                                */
    /* ********************************************************************** */
    /* ---------------------------------------------------------------------- */
    /* constructor:                                                           */
    /* ---------------------------------------------------------------------- */
    public SSHKeyLoader(String publicKey, String privateKey, String user, String host)
    {
        _publicKey  = publicKey;  
        _privateKey = privateKey;
        _username   = user;
        _host       = host;
    }
    
    /* ********************************************************************** */
    /*                            Public Methods                              */
    /* ********************************************************************** */
    /* ---------------------------------------------------------------------- */
    /* getKeyPair:                                                            */
    /* ---------------------------------------------------------------------- */
    public KeyPair getKeyPair() throws TapisSecurityException
    {
        // Load key using Apache mina ssh library
        KeyPairResourceLoader loader = SecurityUtils.getKeyPairResourceParser();
        String privateKeyStr = replaceAllCRLF(_privateKey, "\n");
        Collection<KeyPair> keyPairs;
        try { keyPairs = loader.loadKeyPairs(null, null, null, privateKeyStr); }
        catch (Exception e) {
            String msg = MsgUtils.getMsg("TAPIS_SECURITY_SSH_KEY_CREATE", _username, _host, "", e.getMessage());
            throw new TapisSecurityException(msg, e);
        }
        var kpa = keyPairs.toArray();
        var kp = (KeyPair) kpa[0];
        return kp;
    }

    /* ********************************************************************** */
    /*                            Private Methods                             */
    /* ********************************************************************** */

    /*
     * Strip out line separator characters of various combinations and replace with specified string.
     * Generally specified string will be the empty string or the linefeed character "\n".
     * Used to better handle various cut/paste operations that can result in a key string containing
     *   binary newline and carriage-return characters or character strings containing backslashes.
     * Replace: "\r\n", "\n", "\\r\\n", "\\n" with given string
     */
    private static String replaceAllCRLF(String keyStr, String replacementStr)
    {
        String retStr = keyStr.replaceAll("\r\n",replacementStr);
        retStr = retStr.replaceAll("\n",replacementStr);
        retStr = retStr.replaceAll("\\r\\n",replacementStr);
        retStr = retStr.replaceAll("\\n",replacementStr);
        return retStr;
    }
}
